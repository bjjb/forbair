// Generated by CoffeeScript 1.12.7
(function() {
  var coffee, compiler, express, glob, libpath, middleware, morgan, pug, serve, stylus, util;

  glob = require('glob');

  libpath = require('path');

  morgan = require('morgan');

  express = require('express');

  pug = require('./pug');

  util = require('./util');

  stylus = require('./stylus');

  coffee = require('./coffee');

  compiler = require('./compiler');

  middleware = function(dir) {
    return function(req, res, next) {
      var method, path;
      path = req.path, method = req.method;
      if (method !== 'GET') {
        return next();
      }
      if (path[0] === '/') {
        path = path.slice(1);
      }
      if (path === '') {
        path = 'index.html';
      }
      return util.files.read(util.files.source(path)).then(compiler(path)).then(function(result) {
        res.status(200);
        return res.end(result);
      })["catch"](function(err) {
        console.error(err);
        return next();
      });
    };
  };

  serve = function() {
    var app, dir, e, name, ref, ref1, version;
    dir = '.';
    try {
      ref = require((process.cwd()) + "/package"), name = ref.name, version = ref.version;
    } catch (error) {
      e = error;
      console.error("WARNING: couldn't load package.json");
    }
    app = express();
    app.use(morgan('tiny'));
    app.use(express["static"](dir));
    app.use(middleware(dir));
    return app.listen((ref1 = process.env.PORT) != null ? ref1 : 8080, function() {
      var address, port, ref2;
      ref2 = this.address(), address = ref2.address, port = ref2.port;
      return console.log(name + " v" + version + " listening on " + address + ":" + port);
    });
  };

  module.exports = {
    serve: serve,
    middleware: middleware
  };

}).call(this);
